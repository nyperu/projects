# projects
Ödev


___________________________________________________________________________________________


PROJECT EULER #6
(function euler006() {
    var max = 100;//100.sayıya kadar devam edeceği için.
    var x = 0;
    var y = 0;
    var i = 0;
    var j = 0;
  
    (function sumOfSquares() {
      while (i <= max) {
        x += Math.pow(i, 2);//i’nin 2.kuvvetini aldırıyorum
        i++;//i yi arttırıp while’a devam ediyorum
      }
      return x;
    }());
  
    (function squareOfSums() {
      while (j <= max) {
        y += j; // 100.sayıya kadar y’yi y+1 ile topluyoruz. 1+2+3+4+5…+100
        j++;
      }
      y = Math.pow(y, 2); (1+2+3+4+5…+100)^2 yapıyoruz.
      return y;
    }());
  
    console.log(y - x);
    return y - x; y’den x’i çıkarıp yukarıda yazdırıyoruz. Çözüldü.
  }());
  
  
___________________________________________________________________________________________


PROJECT EULER #16
var number = [1], sum = 0; //numarayı küme olarak verdim. 0.+1.+2.+3... diyebilmek için.

for(var i = 0; i < 1000; i++)//1000.üste kadar devam ettiriyorum.
{
    var overflow = 0, count = number.length + 1//numara uzunluğuna 1 ekleyip sayma değişkenine yazıyorum.

    for(var j = 0; j < count; j++)
    {
        var digit = number[j] || 0;

        digit = 2 * digit + overflow;//digiti 2ile çarpıp bir önceki haliyle topluyorum.

        if(digit > 9)
        {
            digit -= 10;
            overflow = 1;
        }
        else
        {
            overflow = 0;
        }

        number[j] = digit;
    }
}

for(var i = 0; i < 1000; i++)
{
    sum += number[i];//Numarayı dizi yapmıştık. Dizinin her elemanını topluyoruz. 1366 sayısını elde ediyoruz.
}

console.log(sum);


___________________________________________________________________________________________



PROJECT EULER #26

var getLongestUnitFractionRecurringCycle = function(maxNum){
    var longestNum = 1;
    var largestCycleSize = 1;
    
    for(var currentNum = longestNum + 1; currentNum <= maxNum; currentNum++){
        var cycleSize = getCycleSize(currentNum);
        
        if(cycleSize > largestCycleSize){
            largestCycleSize = cycleSize;
            longestNum = currentNum;
        }
    }
    
    return longestNum ;
};

var getCycleSize = function(num){
    var numerator = 1;
    var numerators = [];
    var numeratorDigits = [];
    
    while(!digitsInSequence){
        if(numerator == 0){
            return 0;
        }
        
        //Check if the numerator is previously repeated
        for(var i = 0; i < numerators.length; i++){
            if(numerator == numerators[i]){
                var digitsInSequence = 0;
                
                for(var j = i; j < numerators.length; j++){
                    digitsInSequence += numeratorDigits[j];
                }
                
                return digitsInSequence;
            }
        }
        
        //Repeat not found, update the numerators and digits
        numerators[numerators.length] = numerator;
        var digits = 1;
        while(num > numerator){
            numerator *= 10;
            digits++;
        }
        numeratorDigits[numeratorDigits.length] = digits;
        
        //get the next numerator
        numerator = numerator % num;
    }
};
console.log(getLongestUnitFractionRecurringCycle(10));
console.log(getLongestUnitFractionRecurringCycle(1000));    


___________________________________________________________________________________________


Project Euler #36    
Fonksiyona verilen a sayısının içerisindeki palindromik sayıları bulur ve bunların toplamını döndürür.
function isPalindromic(a) {
  var len = a.length;
  if (len === 0 || len === 1) return true;
  if (len === 2) return a[0] === a[1];
  if (a[0] !== a[len-1]) return false;
  return isPalindromic(a.splice(1, len-2));
}

function findPalindromicNumbersSum(max) {
  var sum = 0;
  while (max--) {
    if (!isPalindromic( (max+'').split('') )) continue;
    if (!isPalindromic( max.toString(2).split('') )) continue;
    sum += max;
  }
  return sum;
}

console.log( findPalindromicNumbersSum(1000000) );

___________________________________________________________________________________________

PROJECT EULER #56
100 üzeri 100'ün rakamları toplamını aldırıyoruz.
var big = require('big.js')
	var _ = require('lodash')
	require('should')
	
	function digitalSum(numberString) {
	  return _.sum(numberString.toString().split('').map(Number))
	}
	digitalSum('5231').should.eql(11)
	
	var upperBound = 101
	var a, b, sum
	var max = {a: 1, b: 1, digitalSum: 1}
	for (a = 1; a < upperBound; a++) {
	  for (b = 1; b < upperBound; b++) {
	    sum = digitalSum(big(a).pow(b).toFixed())
	    if (sum > max.digitalSum) {
	      console.log(a, b, sum) // 99 95 972
	      max = {a: a, b: b, digitalSum: sum}
	    }
	  }
	}
